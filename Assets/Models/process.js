const fs = require('fs');
const process = require('process');
const { execSync } = require('child_process');

const IN_FOLDER = './in/';
const OUT_FOLDER = './out/';
const MESHLAB = '/Applications/meshlab.app/Contents/MacOS/meshlabserver';

process.chdir(IN_FOLDER);

const clouds = fs.readdirSync('.');
process.chdir('..');

clouds.forEach(filename => {
  const name = filename.replace(/\.ply/, '');

  fs.mkdirSync(OUT_FOLDER + name);
  
  execSync(`${ MESHLAB } -i ${ IN_FOLDER }${ filename } -o ${ OUT_FOLDER }${ name }/${ name }.obj -w ${ OUT_FOLDER }${ name }/${ name }.mlp -s polygons.mlx`);
});

clouds.forEach(filename => {
  const name = filename.replace(/\.ply/, '');

  execSync(`${ MESHLAB } -p ${ OUT_FOLDER }${ name }/${ name }.mlp -s texture.mlx`);
});

clouds.forEach(filename => {
  const name = filename.replace(/\.ply/, '');

  fs.writeFileSync(`${ OUT_FOLDER }${ name }/${ name }.mtl`, `#
# Wavefront material file
# Converted by Meshlab Group
#

newmtl material_0
Ka 0.200000 0.200000 0.200000
Kd 1.000000 1.000000 1.000000
Ks 1.000000 1.000000 1.000000
Tr 1.000000
illum 2
Ns 0.000000

`);
});

clouds.forEach(filename => {
  const name = filename.replace(/\.ply/, '');

  const mtlMatch = `####
#
# OBJ File Generated by Meshlab
#
####
# Object ([0-9a-zA-Z\-]+).obj
#
# Vertices: ([0-9a-zA-Z\-]+)
# Faces: ([0-9a-zA-Z\-]+)
#
####`;

  const mtlReplace = `mtllib ./${ name }.mtl
`;

  replaceStringInFile(`${ OUT_FOLDER }${ name }/${ name }.obj`, mtlMatch, mtlReplace);
});



function replaceStringInFile(path, match, replace) {
  let content = fs.readFileSync(path, 'utf8');
  content = content.replace(new RegExp(match, 'g'), replace);
  fs.writeFileSync(path, content);
}


// /Applications/meshlab.app/Contents/MacOS/meshlabserver -i ./in.ply -o ./out.obj -w ./out.mlp -s ./polygons.mlx
// /Applications/meshlab.app/Contents/MacOS/meshlabserver -p ./out.mlp -s ./texture.mlx